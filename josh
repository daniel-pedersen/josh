#!/usr/bin/env node
const { cc, parse, builtin } = require('./src')
const { spawnSync } = require('child_process')

if (!process.stdout.isTTY || !process.stdin.isTTY) die('tty')

process.stdin.setRawMode(true)
process.stdin.setEncoding('utf8')

let x = 0
let buffer = []

prompt()

process.stdin.on('data', chunk => {
  if (!cc.isControl(chunk)) return write(chunk)
  switch (chunk[0]) {
    case cc.ETX: return reset('^C', true)
    case cc.EOT: return exit()
    case cc.ENQ: return log(x, buffer)
    case cc.LF: return run()
    case cc.FF: return clear()
    case cc.CR: return run()
    case cc.BS:
    case cc.DEL: return remove()
    case cc.ESC: return escape(chunk)
    default: log(Buffer.from(chunk))
  }
})

function clear () {
  spawnSync('clear', { stdio: [0, 1, 2] })
  prompt()
}

function run () {
  const parsed = parse(buffer.join('') + '\n')
  reset('')
  if (parsed == null) {
  } else if (typeof parsed[0] === 'string') {
    if (builtin[parsed[0]] != null) {
      try {
        builtin[parsed[0]](...parsed.slice(1))
      } catch (err) {
        process.stderr.write(`-josh: ${parsed[0]}: ${err.message}\n`)
      }
    } else {
      const { error } = spawnSync(parsed[0], parsed.slice(1), { stdio: [0, 1, 2] })
      if (error) {
        switch (error.code) {
          case 'ENOENT':
            process.stderr.write(`-josh: ${error.path}: command not found\n`)
            break
          default:
            process.stderr.write(`-josh: ${error.code}\n`)
        }
      }
    }
  } else {
    console.log(JSON.stringify(parsed, null, 2))
  }
  prompt()
}

function log (...x) {
  const str = buffer.join('')
  reset('')
  console.log(...x)
  prompt()
  write(str)
}

function write (str) {
  buffer.splice(x, 0, ...str.split(''))
  x += str.length
  process.stdout.write(str)
  writeBuffer()
}

function writeBuffer (from = x) {
  const str = buffer.slice(from).join('')
  process.stdout.write(str)
  process.stdout.clearLine(1)
  process.stdout.moveCursor(-str.length)
}

function remove (n = 1) {
  move(-n)
  buffer.splice(x, n)
  writeBuffer()
}

function reset (endLine, writePrompt) {
  x = 0
  buffer = []
  if (endLine == null) {
    move(-x)
    process.stdout.clearLine(1)
  } else {
    process.stdout.write(endLine + '\n')
    if (writePrompt) prompt()
  }
}

function move (dx) {
  const x0 = x
  x += dx
  if (x > buffer.length) {
    x = buffer.length
    process.stdout.write(cc.BEL)
  } else if (x < 0) {
    x = 0
    process.stdout.write(cc.BEL)
  }
  process.stdout.moveCursor(x - x0)
}

function escape (str) {
  switch (str[1]) {
    case '[':
      if (str[2] === 'C') return move(1)
      if (str[2] === 'D') return move(-1)
  }
  log(Buffer.from(str))
}

function prompt () {
  process.stdout.write(`${process.cwd()} $ `)
}

function exit () {
  if (x === 0) {
    process.stdout.write('exit\n')
    process.exit(0)
  }
  process.stdout.write(cc.BEL)
}

function die (reason) {
  const errors = require('./errors')
  const { message, code } = errors[reason] || {}
  if (message) {
    process.stderr.write(`josh: ${message}\n`)
  }
  process.exit(code)
}
